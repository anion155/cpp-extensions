#pragma once

#if defined (ANION155s_CPP_EXTENSIONS_NO_NAMESPACE)
#  if defined (ANION155s_CPP_EXTENSIONS_NAMESPACE)
#    undef ANION155s_CPP_EXTENSIONS_NAMESPACE
#  endif
#else
#  if !defined (ANION155s_CPP_EXTENSIONS_NAMESPACE)
#    define ANION155s_CPP_EXTENSIONS_NAMESPACE cppext
#  endif
#endif

#ifdef ANION155s_CPP_EXTENSIONS_NAMESPACE
#  define ANION155s_CPP_EXTENSIONS_NAMESPACE_BEGIN namespace ANION155s_CPP_EXTENSIONS_NAMESPACE {
#  define ANION155s_CPP_EXTENSIONS_NAMESPACE_END }
#else
#  define ANION155s_CPP_EXTENSIONS_NAMESPACE_BEGIN
#  define ANION155s_CPP_EXTENSIONS_NAMESPACE_END
#endif

#define CE_NAMESPACE ANION155s_CPP_EXTENSIONS_NAMESPACE
#define CE_NAMESPACE_BEGIN ANION155s_CPP_EXTENSIONS_NAMESPACE_BEGIN
#define CE_NAMESPACE_END ANION155s_CPP_EXTENSIONS_NAMESPACE_END

#define NO_SIGNALS 0
#define SIGNALS_SIGC 1
#define SIGNALS_QT 2

#ifndef SIGNALS
#  if defined (SIGCXX_SIGCXX_H)
#    define SIGNALS SIGNALS_SIGC
#  elif defined (QT_VERSION)
#    define SIGNALS SIGNALS_QT
#  else
#    define SIGNALS NO_SIGNALS
#  endif
#endif // SIGNALS

#define IS_SIGNALS_SIGC (SIGNALS == SIGNALS_SIGC)
#define IS_SIGNALS_QT (SIGNALS == SIGNALS_QT)

#define MACRO_CONCAT_( x, y ) x##y
#define MACRO_CONCAT( x, y ) MACRO_CONCAT_( x, y )
#define DEFINE_REQUIRE_SEMICOLON \
  struct MACRO_CONCAT(_DEFINE_REQUIRE_SEMICOLON_STRUCT, __COUNTER__)
